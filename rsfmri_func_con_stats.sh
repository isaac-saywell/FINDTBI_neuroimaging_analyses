#!/bin/bash

# Resting-state functional connectivity estimation

echo "Starting resting state fMRI functional connectivity estimation."
sleep 2
echo "______"
sleep 1

## Setup - source config file

source config.sh

## Copying subject-specific dual regression (group ICA) outputs into subject directories

echo "Copying subject-specific dual regression data to subject directories."
sleep 1
echo "______"
sleep 1

counter=0 # set counter

find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort | while read -r dir; do

    echo "Copying dual regression output for subject $(basename "$dir")"
    sleep 1
    echo "______"
    sleep 1

    counter_padded=$(printf "%05d" "$counter") # format counter
    subj_spatialmap="dr_stage2_subject${counter_padded}_Z.nii.gz" # update subject spatial map per iteration to view each subject

    cd "groupICA_"$group_comp"_dualr" # move into dual regression directory

    cp "$subj_spatialmap" rsn_spatialmaps_Z.nii.gz # copy subject-specific spatial map, generated by dual regression to subject directory
    mv rsn_spatialmaps_Z.nii.gz .. # move file to parent directory

    cd .. # move into parent directory
    mv rsn_spatialmaps_Z.nii.gz "$dir" # move file into subject directory

    cd "$original_dir" # move back into working directory at beginning of loop

    echo "Subject $(basename "$dir") spatial map for all signal components copied to subject directory."
    sleep 1
    echo "______"
    sleep 1

    counter=$((counter + 1)) # increment counter

done

echo "All subject-specific spatial maps have been copied to subject directories. Continuing with script."
sleep 1
echo "______"
sleep 1

## Extracting components as separate images for each subject

echo "Extracting ICA signal components as separate images (separating volumes in subject spatial map images)."

sleep 1
echo "______"
sleep 1

### Identifying if a directory containing ICA signal component spatial maps exists per subject

ICA_spatialmaps="ica_signal_spatialmaps"

find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort | while read -r dir; do

    cd "$dir"

    if [ -d "$ICA_spatialmaps" ]; then
        rm -r "$ICA_spatialmaps"
    fi

    cd "$original_dir"

done

### Making directory for each subject that will hold signal component spatial maps 

find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort | while read -r dir; do

    cd "$dir"

    mkdir "$ICA_spatialmaps"

    cd "$original_dir"

done

### Using fslroi to extract each component volume independently

find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort | while read -r dir; do

    cd "$dir"

    echo "Using 'fslroi' to separate each volume (ICA signal component) in subject $(basename "$dir") resting-state spatial map image."

    sleep 1
    echo "______"
    sleep 1

    subj_spatialmaps="rsn_spatialmaps_Z.nii.gz"

    for ((i=0; i<$(fslval $subj_spatialmaps dim4); i++)); do # loop through each component (fslval provides dimensionality information about the image to know how many volumes to loop through)
        individual_component_output="ica_signal_component_${i}_Z.nii.gz"
        fslroi $subj_spatialmaps $individual_component_output $i 1 # extract each available volume for subject spatial maps
        mv $individual_component_output $ICA_spatialmaps # move component spatial map into newly created directory
    done

    echo "All ICA signal components have been separated into individual images for subject $(basename "$dir")"

    sleep 1
    echo "______"
    sleep 1

    cd "$original_dir"

done

echo "Extraction of signal component spatial maps into individual images is complete for all subjects. Continuing with script."

sleep 1
echo "______"
sleep 1

## Creating CSV file with headers for resting-state fMRI data

echo "Creating CSV file to store resting-state fMRI time series and spatial statistics."

sleep 1
echo "______"
sleep 1

if [ -e "rsfmri_data.csv" ] || [ -e "$start_dir/rsfmri_data.csv" ]; then # remove CSV file if it already exists
    rm "rsfmri_data.csv"
fi

find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort | while read -r dir; do

    if [ -e "rsfmri_data.csv" ]; then # only need to create CSV file headers once, exits loop once file is created from first subject directory
        break
    fi
    
    cd "$dir/$ICA_spatialmaps"

    file_count=$(ls -l ica_signal_component_*.nii.gz | wc -l) # count number of ICA components

    headers_timeseries="" # generate CSV file headers for time series
    for ((i=0; i<$file_count; i++)); do
        headers_timeseries+="tseries_comp_$i,"
    done

    headers_spatial="" # generate CSV file headers for spatial map volume
    for ((i=0; i<$file_count; i++)); do
        headers_spatial+="spatialvol_comp_$i,"
    done


    csv_file="rsfmri_data.csv"
    echo subject,$headers_timeseries$headers_spatial > $csv_file

    mv $csv_file ../../.. # move CSV file to script directory

    cd "$original_dir"

done

echo "CSV file with resting-state specific headers created. Continuing with script."

sleep 1
echo "______"
sleep 1

## Developing a brain mask for resting-state networks from spatial maps at p < 0.05 threshold 

echo "Producing a brain mask of spatial maps for each ICA signal component at threshold $thr_rs of subject maximum intensity."

sleep 1
echo "______"
sleep 1

find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort | while read -r dir; do

    cd "$dir/$ICA_spatialmaps" 

    echo "Using fslmaths to create thresholded spatial map masks for each component for subject $(basename "$dir")"

    sleep 1
    echo "______"
    sleep 1

    for image in ica_signal_component_*.nii.gz; do
        
        max_int=$(fslstats $image -R | grep -oP '[^ ]+ \K[^ ]+') # obtain the minimum and maximum intensity for spatial map and save the maximum to a variable
        spatial_thr=$(echo "$max_int * $thr_rs" | bc) # calculate threshold at pre-specified percentage of maximum intensity for spatial map

        p_mask_output=bin_$image # set binarised mask output name

        fslmaths "$image" -thr $spatial_thr -bin "$p_mask_output" # binarise the spatial map at threshold deemed for significant signal (unsure what thresholds to use currently........)

    done

    echo "Binarised spatial maps at threshold $thr_rs of subject maximum intensity created for subject $(basename "$dir")"

    sleep 1
    echo "______"
    sleep 1

    cd "$original_dir"

done

echo "All subject spatial maps have been binarised. Continuing with script."

sleep 1
echo "______"
sleep 1

## Calculating the time series (temporal information) and cluster volume (spatial information) for each ICA component

echo "Calculating the time series (RSN temporal information) for each ICA signal component and outputting to a CSV file."

sleep 1
echo "______"
sleep 1

dir_count=$(find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort | wc -l) # count directories
counter=0 # set counter

while read -r dir; do

    cd "$dir/$ICA_spatialmaps"

    file_count=$(ls -l ica_signal_component_*.nii.gz | wc -l) # count number of ICA components
    mean_timeseries=() # initialise array to store time series
    spatial_vol=() # initialise array to store spatial volumes

    for ((i=0; i<$file_count; i++)); do
        mean_timeseries[$i]=$(fslmeants -i "ica_signal_component_${i}_Z.nii.gz" | awk '{ mean = $1 ; print mean}')
    done

    for ((i=0; i<$file_count; i++)); do
        spatial_vol[$i]=$(fslstats "bin_ica_signal_component_${i}_Z.nii.gz" -M -V | awk '{ vol = $1 * $3 ; print vol }')
    done

    cd "$original_dir"

    echo -n "$(basename "$dir")," >> rsfmri_data.csv
    for ((i=0; i<$file_count; i++)); do
        echo -n "${mean_timeseries[$i]}"
        if [ $i -lt $((file_count-1)) ]; then
            echo -n ","
        fi
    done >> rsfmri_data.csv

    echo -n "," >> rsfmri_data.csv

    for ((i=0; i<$file_count; i++)); do
        echo -n "${spatial_vol[$i]}"
        if [ $i -lt $((file_count-1)) ]; then
            echo -n ","
        fi
    done >> rsfmri_data.csv

    counter=$((counter + 1))

    if [ $counter -lt $dir_count ]; then
        echo "" >> rsfmri_data.csv
    fi

done < <(find "$start_dir" -maxdepth 1 -mindepth 1 -type d | sort)

echo "Time series and binarised spatial map volumes for each independent component across subjects has been appended to a CSV file."

sleep 1
echo "______"
sleep 1

## Option to check that binarised spatial maps were masked appropriately

while true; do

    echo "Before exiting the script you can choose to view your binarised spatial maps for all components in a single subject (first in list)."
    sleep 1
    echo "______"
    sleep 1
    echo "Would you like to check these binarised maps (y/n)?"
    read check

    if [ "$check" = "y" ]; then

        echo "Checking binarised ICA signal components for first subject in dataset list."
        sleep 1
        echo "______"
        sleep 1

        cd "$start_dir"
        first_dir=$(ls -d */ | head -n 1) # specifying first subject directory to a variable
        cd "$first_dir/$ICA_spatialmaps" # move into first subject's spatial map directory

        counter=0 # set counter

        for index in $(seq 0 19); do

            image="bin_ica_signal_component_${index}_Z.nii.gz"
            non_bin_image="${image#bin_}"

            echo "Looking at ICA component $counter for subject $(basename "$first_dir")"
            sleep 1
            echo "______"
            sleep 1

            fsleyes -std "$non_bin_image" -un -cm red-yellow -nc blue-lightblue -dr 3 10 "$image" -cm green -a 50

            echo "ICA component $counter checked. Viewing next component."
            sleep 1
            echo "______"
            sleep 1

            counter=$((counter + 1))
        done

        sleep 1
        echo "______"
        sleep 1

        echo "All ICA signal components have been checked for subject $(basename "$first_dir")"
        sleep 1
        echo "______"
        sleep 1

        cd "$original_dir"
        
        break
    elif [ "$check" = "n" ]; then
        echo "Chosen to not check binarised spatial maps."
        sleep 1
        echo "______"
        sleep 1
        break
    else
        echo "Invalid choice. Please enter 'y' or 'n'."
    fi
done

## Option to check group ICA components again to manually classify them in CSV file as signal (give them network names) or noise (remove components not of interest or that are artefacts)

while true; do

    echo "Would you like the view each ICA component (through group ICA output) to classify resting-state networks in CSV file (y/n)?"
    read rsn

    sleep 1
    echo "______"
    sleep 1

    if [ "$rsn" = "y" ]; then

        cd groupICA_"$group_comp"

        echo "Looking at group ICA for "$group_comp" number of components. Toggle volume to view each component"

        sleep 1
        echo "______"
        sleep 1

        fsleyes -std melodic_IC.nii.gz -un -cm red-yellow -nc blue-lightblue -dr 3 10 # check data

        echo "Group ICA viewed."

        cd "$original_dir"

        break
    elif [ "$rsn" = "n" ]; then
        echo "Group ICA output not required."
        break
    else
        echo "Invalid choice. Please enter 'y' or 'n'."
    fi
done